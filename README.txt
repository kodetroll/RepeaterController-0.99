		ARDUINO Repeater Controller V0.99

		     (C) 2012 KB4OID LABS 

 	   - A Division of Kodetroll Heavy Industries -

Introduction
============

This sketch is designed to do a 'minimalist' repeater controller using an Arduino UNO and some simple interfacing circuitry. All of the Digital I/O Pins are specified by defines. These should be changed to match the requirements of your implementation.

This sketch includes a quickly thrown together CWID where the audio is generated by using the Arduino 'tone' library function. This toggles a pin at the specified frequency for the desired duration resulting in an audio tone. Note: this tone is a square wave (more or less) and the output should be well filtered with an RC filter ~!2.5Khz corner frequency), then padded down and AC coupled before mixing with the repeater audio path. 

No attempt is made to modify the repeater audio, it must be handled separately. This version includes an ID timer, and a squelch tail timer, but not a transmit time out timer. The default values for the ID timer (600 Seconds/10 minutes) and the squelch tail timer (1 second) are specified by #defines at the beginning of the sketch. Actually pretty much all delays, tones, etc are defined or set prior to runtime. Modifiy to suit your needs. Since most of the runtime values of these parameters are stored in variables, they could be changed programatically, if desired (e.g. via the serial port). Of course, you'd have to write that code.

The timers are implemented using the Arduino 'Time' library and are based on the elapsed time counter (unsigned long int seconds), so timeout values are restricted to integer values greater than one second. 

Creating your CW ID.
====================

As I said before, the CWID was a quick and dirty design. There is one array, Elements, that needs to be modified in order to send your callsign during the CWID. The reference one provided is simply mycall, 'KB4OID/R'. The Elements array is just the dit/dah/space elements needed to generate the call morse elements. Dit elements are '1's, DAH elements are '3's (yes that is the duration ratio of DIT to DAH), with spaces expressed as '0's. For example, my call is KB4OID, so the Elements array contains 'k' 3,1,3,0 then 'B' 3,1,1,1,0, followed by the numeral '4', 1,1,1,1,3,0. I think you get the picture. Here's the full Elements array explained:

E.G.
  3,1,3,0, 3,1,1,1,0, 1,1,1,1,3,0, 3,3,3,0, 1,1,0, 3,1,1,0, 3,3,1,1,3,3,0, 1,3,1
     K        B           4          O        I       D           /          R

Perhaps in a future version, I'll flesh out a char* to morse functionality, but that will seriously use a lot of available memory. This method, while cumbersome, works and is really not all that bothersome, as you only have to generate the array contents once.

Interfacing to the real world. 
==============================

There are only three signals to consider for external connection, COR Input, PTT Output and CWID Audio output. The first two are digital IO signals. On the Arduino UNO version I have, these pins are 5V logic tolerant, but this might not be the case for all versions. It would be wise to use opto-couplers to isolate the external signals and the Arduino. 

e.g. - A simple opto coupler isolation of the COR input using a 4N29 or similar


                       +--------+      +-----------------O TO COR DIO Input
                      1|        |5     |
 + O----/\/\/\/\/\-----|        |------o--/\/\/\/\/\---O +5VDC from arduino
                       |  4N29  |
                      2|        |4
 - O-------------------|        |------| Arduino GND
                       |        |
                       +--------+

There are many ways the COR signal can be derived from a radio, the input of the 4N29 is just an LED. This brings up another point. When this circuit is used, logic levels are inverted going into the Arduino. That is to say, the voltage on the COR DIO input will be logic low when the COR signal is active (4N29 input LED ON). To accomodate this in the controller logic, there is a define that determines the logic sense for each of the COR and PTT DIO pins. In this case, negative logic should be defined.

To accomodate the PTT output current demands, the following circuit can be used:


                                +-----|>|-----+
                                |             |
                       | /------o             o----O +12VDC from external or 5VDC from Arduino
 PTT from DIO Output  B|/       |     K1      |       (depends on what the relay coil needs)
 + O----/\/\/\/\/\-----|        +--UUUUUUUUU--+
                       |\            ------------0 COM 
                      2| \           
                          |          ^               PTT contact on Rig
 Arduino GND              |          |
 - O----------------------+          +-----------O NO

And lastly, to handle the CWID audio output:

 DIO PIN             ID LEVEL      |
   O----------------/\/\/\/\/\-----|| GND
                        ^          |
                        |                  | |
                        +------------------| |--------o CW ID Audio Out to MIC in of Rig
                                           | |


Thats all...~Steve>, KB4OID (kb4oid@kb4oid.org)


License Info:
This code (C) 2012 KB4OID Labs - A division of Kodetroll Heavy Industries
All rights reserved, but otherwise free to use for personal use
No warranty expressed or implied 
This code is for educational or personal use only


